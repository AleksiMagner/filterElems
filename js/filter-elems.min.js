class ItemsFiltering{constructor(userOptions){const DEFAULTS={'Items container':'','Filter container':'','Filter groups':!1,'Filter type':'radio','Sort buttons class':'','Sort button type':'list','User functions':{},'Count class':'','Format count':'n / N'};this.options=Object.assign(DEFAULTS,userOptions);this.groupName={};this.userFunctions=[];this.duration='.4s';this.timer;this.init()}
init(){if(this.options['Filter container']!=''){this.setCount();this.setButtonListener()}
if(this.options['Sort buttons class']!=''){this.sort_init()}}
setButtonListener(){document.querySelectorAll(this.options['Filter container']).forEach(filterGroup=>{if(filterGroup.dataset.filterGroup){this.groupName[filterGroup.dataset.filterGroup]=null}
filterGroup.querySelectorAll('[data-filter]').forEach(filter=>{filter.addEventListener('click',()=>{if(this.options['Filter type']=='radio'&&filter.classList.contains('active')){return}
this.getFilterGroup(filter)})})})}
getFilterGroup(button){if(!button.dataset.filter){return}
let filter='*';if(this.options['Filter groups']==!0){this.groupName[button.parentElement.dataset.filterGroup]=this.getFilterParams(button,button.parentElement.querySelectorAll('[data-filter]'))||'*';filter=this.joinFilterGroups(this.groupName)||'*'}
else if(this.options['Filter groups']==!1){filter=this.getFilterParams(button,document.querySelectorAll(`${this.options['Filter container']} [data-filter]`))||'*'}
filter=this.formatFilterValues(filter)||'*';this.itemsFilter(filter)}
getFilterParams(button,selector){if(this.options['Filter type']=='radio'&&!button.classList.contains('active')){selector.forEach(elem=>elem.classList.remove('active'));button.classList.add('active');if(button.dataset.filter=='*'){return null}
return[button.dataset.filter].flatMap(item=>item.replace(/\s/g,'').split(','))}
else if(this.options['Filter type']=='toggle'){button.classList.toggle('active');let reset;selector.forEach(button=>button.dataset.filter=='*'?reset=button:null);if(reset&&reset.classList.contains('active')){if(button.dataset.filter=='*'){selector.forEach(elem=>{if(elem.checked){elem.checked=!1}
elem.classList.remove('active')});button.classList.add('active');return null}
else{reset.classList.remove('active')}}
let params=[];selector.forEach(elem=>{if(elem.classList.contains('active')&&button.dataset.filter!='*'){params.push(elem.dataset.filter)}})
return params.length>0?params.flatMap(item=>item.replace(/\s/g,'').split(',')):null}}
formatFilterValues(arr){this.userFunctions=[];if(arr[0]=='*'||typeof arr=='string'||arr.length==0){return'*'}
this.userFunctions=arr.filter(item=>{return!item.includes(':not')&&!item.includes('.')});this.userFunctions=this.userFunctions.filter((item,pos)=>{return this.userFunctions.indexOf(item)==pos&&this.options['User functions'][item]}).sort();arr=arr.filter(item=>{return item.includes(':not')||item.includes('.')});arr=arr.filter((item,pos)=>{return arr.indexOf(item)==pos}).sort();if(arr.length==0){return null}
return arr}
joinFilterGroups(obj){if(Object.keys(obj).length==0||typeof obj=='string'){return null}
let cls=[],func=[];for(let prop in obj){if(Array.isArray(obj[prop])&&obj[prop].length!=0){func=func.concat(obj[prop].filter(item=>{return!item.includes(':not')&&!item.includes('.')}));cls=this.joinArr(cls,obj[prop])}}
let result=cls.concat(func);return result.length>0?result:null}
joinArr(arr1,arr2){let result=[];arr2=arr2.filter(item=>{return item.includes(':not')||item.includes('.')});if(arr1.length==0){result=arr2}
else if(arr2.length==0){result=arr1}
else if(arr1.length==0&&arr2.length==0){result=[]}
else{for(let item of arr1){result=result.concat(arr2.map(el=>item+el))}}
result=result.filter((item,pos)=>result.indexOf(item)==pos).sort();return result}
itemsFilter(param){let elems=document.querySelectorAll(`${this.options['Items container']} > *`);if(param=='*'){elems.forEach(item=>{if(this.userFunctions.length!=0){for(let func of this.userFunctions){if(!this.options['User functions'][func](item)){return}}
item.classList.add('show')}
else{item.classList.add('show')}})}
else if(Array.isArray(param)){for(let item of param){document.querySelectorAll(`${this.options['Items container']} > ${item}`).forEach(item=>{if(this.userFunctions.length!=0){for(let func of this.userFunctions){if(!this.options['User functions'][func](item)){return}}
item.classList.add('show')}
else{item.classList.add('show')}})}}
this.setStyles(elems);clearTimeout(this.timer);this.timer=setTimeout(()=>this.clearStyles(elems),parseFloat(this.duration)*1000)}
setStyles(elems){let count=0;elems.forEach(elem=>{elem.style.animationDuration=this.duration;if(elem.classList.contains('show')){count++;elem.style.display=''}
else{elem.classList.add('hide')}})
this.setCount(count)}
clearStyles(elems){elems.forEach(elem=>{elem.style.animationDuration='';if(elem.classList.contains('hide')){elem.style.display='none'}
elem.classList.remove('hide','show');if(elem.getAttribute('class')==''){elem.removeAttribute('class')}
if(elem.getAttribute('style')==''){elem.removeAttribute('style')}})}
setCount(curCount){if(this.options['Count class']==''){return}
let count=document.querySelectorAll(`${this.options['Items container']} > *`).length;let countFormat=this.options['Format count'];countFormat=countFormat.replace('n',curCount==undefined?count:curCount);countFormat=countFormat.replace('N',count);document.querySelector(this.options['Count class']).textContent=countFormat}
sort_init(){if(this.options['Sort button type']=='list'){let sortButton=document.querySelector(this.options['Sort buttons class']);if(sortButton.classList.contains('init')){return}
sortButton.classList.add('init');sortButton.addEventListener('change',()=>{let selector,type,ascending=!1;sortButton.querySelectorAll('[data-sort-by]').forEach(option=>{if(option.selected){if(option.dataset.sortBy=='*'){selector='*';type='origin'}
else{selector=option.dataset.sortBy.replace(/\s/g,'').split(',')[0];type=option.dataset.sortBy.replace(/\s/g,'').split(',')[1];if(option.dataset.sortAscending!=undefined){ascending=!0}}}})
this.sortItems(null,selector,type,ascending)})}
else if(this.options['Sort button type']=='button'){document.querySelectorAll(this.options['Sort buttons class']).forEach(button=>{if(button.classList.contains('init')){return}
button.classList.add('init');let selector,type,ascending=!1;if(button.dataset.sortBy=='*'){selector='*';type='origin'}
else{selector=button.dataset.sortBy.replace(/\s/g,'').split(',')[0];type=button.dataset.sortBy.replace(/\s/g,'').split(',')[1];if(button.dataset.sortAscending!=undefined){ascending=!0}}
button.addEventListener('click',()=>this.sortItems(button,selector,type,ascending))})}}
sortItems(button,selector,type,ascending){let container=document.querySelector(this.options['Items container']),elems=document.querySelectorAll(`${this.options['Items container']} > *`),sortArr=Array.prototype.slice.call(elems);if(this.origin==undefined){this.origin=Array.prototype.slice.call(elems)}
if(button!=null){document.querySelectorAll(this.options['Sort buttons class']).forEach(elem=>elem.classList.remove('active'));button.classList.add('active')}
switch(type){case 'number':if(ascending){sortArr.sort((a,b)=>parseFloat(a.querySelector(selector).textContent)-parseFloat(b.querySelector(selector).textContent))}
else{sortArr.sort((a,b)=>parseFloat(b.querySelector(selector).textContent)-parseFloat(a.querySelector(selector).textContent))}
break;case 'string':if(ascending){sortArr.sort((a,b)=>a.querySelector(selector).textContent>b.querySelector(selector).textContent?1:-1)}
else{sortArr.sort((a,b)=>b.querySelector(selector).textContent>a.querySelector(selector).textContent?1:-1)}
break;case 'date':if(!this.options['User functions'].dateFormat){return}
if(ascending){sortArr.sort((a,b)=>new Date(this.options['User functions'].dateFormat(a.querySelector(selector).textContent))-new Date(this.options['User functions'].dateFormat(b.querySelector(selector).textContent)))}
else{sortArr.sort((a,b)=>new Date(this.options['User functions'].dateFormat(b.querySelector(selector).textContent))-new Date(this.options['User functions'].dateFormat(a.querySelector(selector).textContent)))}
break;default:sortArr=this.origin;break}
elems.forEach(elem=>container.removeChild(elem))
sortArr.forEach(elem=>{elem.style.animationDuration=this.duration;elem.style.display!='none'?elem.classList.add('show'):elem.classList.add('hide');container.appendChild(elem)})
clearTimeout(this.timer);this.timer=setTimeout(()=>this.clearStyles(elems),parseFloat(this.duration)*1000)}}